@page "/order"
@inject IOrderService OrderService
@using OrderManager.Web.Models
@inject NavigationManager NavigationManager

<PageTitle>Orders</PageTitle>


@if(OrderService.Orders != null)
{
    <RadzenDataGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true"
                PageSizeOptions="@pageSizeOptions" ShowPagingSummary="@showPagerSummary" Page="@OnPage" ColumnWidth="100px" AllowSorting="true" Data="@orders" TItem="Order"
                SelectionMode="DataGridSelectionMode.Single">
        <Columns>
            <RadzenDataGridColumn TItem="Order" Property="CreateDate" Title="Date">
                <Template Context="orders">@orders.CreateDate.ToShortDateString()</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Order" Property="Status" Title="Status" />
            <RadzenDataGridColumn TItem="Order" Property="ClientName" Title="Client" />
            <RadzenDataGridColumn TItem="Order" Property="OrderPrice" Title="Price" />
            <RadzenDataGridColumn TItem="Order" Property="City" Title="City" />
            <RadzenDataGridColumn TItem="Order" Width="70px" Sortable="false" Filterable="false">
                <Template Context="orders">
                    <NavLink href="@($"details/{orders.Id}")"><RadzenButton>More</RadzenButton></NavLink>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
<br />
<button type="button" @onclick="OnClickCreateCategory" class="btn btn-primary">Add order</button>


@code{
    public List<Order> orders { get; set; } = new List<Order>();
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };
    RadzenDataGrid<Order> dataGrid;
    bool showPagerSummary = true;

    async Task FirstPage()
    {
        await dataGrid.FirstPage();
    }
    async Task TenthPage()
    {
        await dataGrid.GoToPage(9);
    }
    async Task LastPage()
    {
        await dataGrid.LastPage();
    }
    void OnPage(PagerEventArgs args)
    {
        
    }

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetOrders();
    }

    private void OnClickCreateCategory()
    {
        NavigationManager.NavigateTo("/create");
    }
}
